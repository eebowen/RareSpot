# YOLOv5 ðŸš€ by Ultralytics, AGPL-3.0 license

# Parameters
nc: 80 # number of classes
depth_multiple: 1.0 # model depth multiple
width_multiple: 1.0 # layer channel multiple
anchors:
  - [10, 13, 16, 30, 33, 23] # P3/8
  - [30, 61, 62, 45, 59, 119] # P4/16
  - [116, 90, 156, 198, 373, 326] # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  [
    [-1, 1, Conv, [64, 6, 2, 2]], # 0-P1/2
    [-1, 1, Conv, [128, 3, 2]], # 1-P2/4
    [-1, 3, C3, [128]],
    [-1, 1, Conv, [256, 3, 2]], # 3-P3/8
    [-1, 6, C3, [256]],
    [-1, 1, Conv, [512, 3, 2]], # 5-P4/16
    [-1, 9, C3, [512]],
    [-1, 1, Conv, [1024, 3, 2]], # 7-P5/32
    [-1, 3, C3, [1024]],
    [-1, 1, SPPF, [1024, 5]], # 9
  ]

# YOLOv5 v6.0 head
head: [
    [-1, 1, Conv, [512, 1, 1]],
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],
    [[-1, 6], 1, Concat, [1]], # cat backbone P4
    [-1, 3, C3, [512, False]], # 13

    [-1, 1, Conv, [256, 1, 1]],
    [-1, 1, nn.Upsample, [None, 2, "nearest"]],
    [[-1, 4], 1, Concat, [1]], # cat backbone P3
    [-1, 3, C3, [256, False]], # 17 (P3/8-small)

    [-1, 1, Conv, [256, 3, 2]],
    [[-1, 14], 1, Concat, [1]], # cat head P4
    [-1, 3, C3, [512, False]], # 20 (P4/16-medium)

    [-1, 1, Conv, [512, 3, 2]],
    [[-1, 10], 1, Concat, [1]], # cat head P5
    [-1, 3, C3, [1024, False]], # 23 (P5/32-large)

    [[17, 20, 23], 1, Detect, [nc, anchors]], # Detect(P3, P4, P5)
  ]

# # Ultralytics YOLOv5 ðŸš€, AGPL-3.0 license

# # Parameters
# nc: 80  # number of classes (update to your dataset)
# depth_multiple: 1.0  # model depth multiplier
# width_multiple: 1.0  # layer channel multiplier

# # Anchors (4 sets for P2, P3, P4, P5)
# anchors:
#   - [2, 4, 5, 8, 10, 13]         # P2/4 (smallest anchors for 30x30 objects)
#   - [10, 13, 16, 30, 33, 23]      # P3/8
#   - [30, 61, 62, 45, 59, 119]     # P4/16
#   - [116, 90, 156, 198, 373, 326] # P5/32

# # Backbone
# backbone:
#   # [from, number, module, args]
#   [
#     [-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2 (input layer)
#     [-1, 1, Conv, [128, 3, 2]],    # 1-P2/4 (key layer for small objects)
#     [-1, 3, C3, [128]],            # 2
#     [-1, 1, Conv, [256, 3, 2]],    # 3-P3/8
#     [-1, 6, C3, [256]],            # 4
#     [-1, 1, Conv, [512, 3, 2]],    # 5-P4/16
#     [-1, 9, C3, [512]],            # 6
#     [-1, 1, Conv, [1024, 3, 2]],   # 7-P5/32
#     [-1, 3, C3, [1024]],           # 8
#     [-1, 1, SPPF, [1024, 5]],      # 9
#   ]

# # Head (modified for P2/4 detection)
# head:
#   [
#     # Upsample P5 -> P4
#     [-1, 1, Conv, [512, 1, 1]],                    # 10
#     [-1, 1, nn.Upsample, [None, 2, "nearest"]],    # 11
#     [[-1, 6], 1, Concat, [1]],                     # 12 cat backbone P4
#     [-1, 3, C3, [512, False]],                     # 13

#     # Upsample P4 -> P3
#     [-1, 1, Conv, [256, 1, 1]],                    # 14
#     [-1, 1, nn.Upsample, [None, 2, "nearest"]],    # 15
#     [[-1, 4], 1, Concat, [1]],                     # 16 cat backbone P3
#     [-1, 3, C3, [256, False]],                     # 17 (P3/8)

#     # Upsample P3 -> P2 (new for small objects)
#     [-1, 1, Conv, [128, 1, 1]],                    # 18
#     [-1, 1, nn.Upsample, [None, 2, "nearest"]],    # 19
#     [[-1, 2], 1, Concat, [1]],                     # 20 cat backbone P2
#     [-1, 3, C3, [128, False]],                     # 21 (P2/4)

#     # Downsample P2 -> P3
#     [-1, 1, Conv, [128, 3, 2]],                    # 22
#     [[-1, 17], 1, Concat, [1]],                    # 23 cat P3
#     [-1, 3, C3, [256, False]],                     # 24

#     # Downsample P3 -> P4
#     [-1, 1, Conv, [256, 3, 2]],                    # 25
#     [[-1, 13], 1, Concat, [1]],                    # 26 cat P4
#     [-1, 3, C3, [512, False]],                     # 27

#     # Downsample P4 -> P5
#     [-1, 1, Conv, [512, 3, 2]],                    # 28
#     [[-1, 9], 1, Concat, [1]],                     # 29 cat P5
#     [-1, 3, C3, [1024, False]],                    # 30

#     # Detect layer (P2, P3, P4, P5)
#     [[21, 24, 27, 30], 1, Detect, [nc, anchors]],  # 31 (4 detection layers)
#   ]